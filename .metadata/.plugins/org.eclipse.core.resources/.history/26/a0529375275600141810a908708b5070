#include "bits/stdc++.h"
#include <functional>
#include <ext/numeric> 
using namespace std;

#define SZ(x) (int)x.size()
#define pb push_back
#define mp make_pair
#define F first
#define S second
#define all(x) x.begin(), x.end()
#define rall(x) x.rbegin(), x.rend()
#define MMS(x, v) memset(x, v, sizeof(x))

typedef unsigned long long ull;

int main() {
//	freopen("test.in", "rt", stdin);
	ull n1, n2, n3;
	cin >> n1 >> n2 >> n3;
	int nummn = min(6, int(n1)), nummx = max(6, int(n1));
	int actmn = min(n2, n3), actmx = max(n2, n3);
	if ((nummn >= actmn && nummx >= actmx)) {
		cout << ull(nummn) * ull(nummx) << endl;
		if (nummn >= n2 && nummx >= n3)
			cout << nummn << " " << nummx << endl;
		else
			cout << nummx << " " << nummn << endl;

		return 0;
	} else if (((ull(ull(nummx) * ull(nummn))) < (ull(ull(actmx) * ull(actmn))))) {
		cout << (ull(ull(actmx) * ull(actmn))) << endl;
		if (actmn >= n2 && actmx >= n3)
			cout << actmn << " " << actmx << endl;
		else
			cout << actmx << " " << actmn << endl;
		return 0;
	} else {
		ull diff = (ull(ull(nummx) * ull(nummn)));
		diff -= (ull(ull(actmx) * ull(actmn)));

		if (diff % actmn == 0 || diff % actmn < diff % actmx) {
			actmx += (diff / actmn) + ((diff % actmn == 0) ? 0 : 1);
			cout << (ull(ull(actmx) * ull(actmn))) << endl;
			if (actmn >= n2 && actmx >= n3)
				cout << actmn << " " << actmx << endl;
			else
				cout << actmx << " " << actmn << endl;
			return 0;
		} else {
			actmn += (diff / actmx) + ((diff % actmx == 0) ? 0 : 1);
			cout << (ull(ull(actmx) * ull(actmn))) << endl;
			if (actmn >= n2 && actmx >= n3)
				cout << actmn << " " << actmx << endl;
			else
				cout << actmx << " " << actmn << endl;
			return 0;
		}

	}
	return 0;
}
